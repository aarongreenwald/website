<div class="reveal">
    <div class="slides">
        <section class="title-page">
            <h1>Tests Are Code, Too!</h1>
            <p class="author">
                Aaron Greenwald
            </p>
            <div class="template-instance links"></div>

            <aside class="notes">

                If you were a piece of test code, you’d probably feel pretty bad about yourself.
                You look over at your friends on the production side of the codebase and
                you see a well-cared for bunch. They’re organized, neat, and efficient.
                It’s obvious that someone cares. But when you look around your surroundings,
                you can’t help but noticed how neglected they are. There are poorly-named functions
                everywhere, piles of copy-paste code strewn about, and broken pieces of who-knows-what
                littering your files. It’s shameful.

                Fortunately, you’re not a piece of test code, you’re a developer.
                That means that you have the power to make things better for underserved
                communities of code. In this talk, we’ll remind ourselves that tests are code,
                too, and we’ll look at ways to keep them clean, readable, and maintainable.
            </aside>

        </section>
        <section class="large">
            Survey
        </section>
        <section data-state="chapter-title" class="large">
            00 / Preface
        </section>
        <section class="large">Testing Pyramid</section>
        <section>
            <div class="template-instance testing-pyramid"></div>
        </section>
        <section>
            <div class="testing-pyramid-gradient"></div>
        </section>
        <section>
            <div>Jest</div>
            <div>Jasmine</div>
            <div>Mocha</div>
            <div>Protractor</div>
            <div>Puppeteer</div>
            <div>...etc</div>
        </section>
        <section data-state="chapter-title" class="large">
            01 / Why We Care
        </section>
        <section class="large">
            maybe we don't
            <aside class="notes" data-markdown>
                As long as they do their job

                And the purpose of tests are to fail.
            </aside>
        </section>
        <section style="font-style: italic">
            (so don't get too hung up on this)
            <aside class="notes" data-markdown>
                Ugly code isn't a good reason not to write tests or delete them, IMO.
                I once had a coworker who removed code because it wasn't readable. I
                disagree with that. More on that later.
            </aside>
        </section>
        <section class="large">but we do care</section>
        <section>
            <div class="fragment fade-past">Easier maintenance</div>
            <div class="fragment fade-past">Easier readability</div>
            <div class="fragment fade-past">...etc</div>
        </section>
        <section class="large">But wait...there's more</section>
        <section data-state="chapter-title" class="large">
            02 / Why We Test
        </section>
        <section>
            <div class="fragment fade-past">Bug Prevention</div>
            <div class="fragment fade-past">Bug Remediation</div>
            <div class="fragment fade-past">Velocity</div>
            <div class="fragment fade-past">Confidence</div>
            <div class="fragment fade-past">Design (TDD)</div>
            <div class="fragment fade-past">Documentation</div>
            <div class="fragment fade-past">RDD</div>
            <div class="fragment fade-past">Satisfaction</div>

            <aside class="notes" data-markdown>
                ## Why Do We Write Tests?

                * Bug Prevention: for our users, so that we will have a better quality product with fewer regressions
                * Bug Remediation: for ourselves, so that we can save time while troubleshooting, debugging,
                * Velocity: it's faster than manual testing, and it allows for CI/CD
                * Confidence: Permission to refactor (overlaps with Velocity)
                * Design: The idea behind TDD
                * RDD: because we think it'll be good for our CV
                * Satisfaction: some of us like it.
            </aside>

        </section>
        <section data-state="chapter-title" class="large">
            03 / Why We Care (pt 2)
        </section>
        <section data-state="background-img">
            <aside class="notes" data-markdown>
                -- Also for some reasons less likely to apply to prod code
                -- in a sense, clean tests is MORE important than clean prod.
                -- No one will delete prod code because they are frustrated,
                    don't understand it, or don't see it's value.
                -- less likely to be discarded in a stressful moment,
                more likely to be there when you need it
                -- main job is to fail, but that only works if they're still around
            </aside>
        </section>
        <section>
            so that they last
        </section>
        <section>
            so that they explain
            <aside class="notes" data-markdown>
                -- and the main purpose of prod is for users, the main purpose of tests is for us
                -- so messy tests aren't just a pain, they reduce the functionality of the tests!!
            </aside>
        </section>
        <section>
            <div>Bug Prevention</div>
            <div>Bug Remediation</div>
            <div>Velocity</div>
            <div>Confidence</div>
            <div>Design (TDD)</div>
            <div>Documentation</div>
            <div>RDD</div>
            <div>Satisfaction</div>
        </section>
        <section>
            <div>Bug Prevention</div>
            <div style="color: orange">Bug Remediation</div>
            <div>Velocity</div>
            <div>Confidence</div>
            <div>Design (TDD)</div>
            <div style="color: orange">Documentation</div>
            <div>RDD</div>
            <div>Satisfaction</div>
        </section>
        <section>
            <div>Bug Prevention</div>
            <div style="color: orange">Bug Remediation</div>
            <div style="color: orange">Velocity</div>
            <div>Confidence</div>
            <div>Design (TDD)</div>
            <div style="color: orange">Documentation</div>
            <div>RDD</div>
            <div>Satisfaction</div>
        </section>
        <section>
            <div>Bug Prevention</div>
            <div style="color: orange">Bug Remediation</div>
            <div style="color: orange">Velocity</div>
            <div>Confidence</div>
            <div>Design (TDD)</div>
            <div style="color: orange">Documentation</div>
            <div>RDD</div>
            <div style="color: orange">Satisfaction</div>
        </section>
        <section class="large">
            But it's hard
        </section>
        <section>
            We're in a rush
        </section>
        <section>
            We don't know how
            <aside class="notes" data-markdown>Copy/paste, mocks, and inherent mess</aside>
        </section>
        <section data-state="chapter-title" class="large">
            04 / A Better Way
        </section>
        <section>
            <div class="fragment fade-past">Read like prose</div>
            <div class="fragment popover">
                <div class="template-instance tiny-test"></div>
            </div>
            <div class="fragment fade-past">Keep them SHORT</div>
            <div class="fragment popover">
                <div class="template-instance tiny-test"></div>
            </div>
            <div class="fragment popover">
                <div class="stuffed-closet"></div>
            </div>
            <div class="fragment">Hide the mess</div>

            <aside class="notes" data-markdown>Guiding Principles</aside>
        </section>
        <section>
            <aside class="notes">Patterns</aside>

            <div class="fragment fade-past">given / when / then</div>
            <div class="fragment popover">
                <pre><code class="javascript">
it('should choose the best dev stack given the audience', () => {
    givenAudience('ReactILMeetup');

    const choice = getBestFedStack();

    expect(choice).toContain('React');
});
                    </code></pre>
            </div>
            <div class="fragment fade-past">builders</div>
<div class="fragment popover">
                <pre><code class="javascript">
it('should support creating adding todos to a list', () => {
    const todo = {
        id: 'todo-item-id',
        title: 'some title'
    };

    todoList.add(todo);

    expect(todoList.get('todo-item-id')).toBe(todo);
});
                </code></pre>
            </div>
            <div class="fragment popover">
                <pre><code class="javascript">
it('should support creating adding todos to a list', () => {
    const todo = new TodoBuilder()
        .withId('todo-item-id')
        .build();

    todoList.add(todo);

    expect(todoList.get('todo-item-id')).toBe(todo);
});
                </code></pre>
            </div>

            <div class="fragment popover">
                <pre><code class="javascript">
it('should support deleting attachments from a todo', () => {
    const todo = new TodoBuilder()
        .withAttachments([
            new AttachmentBuilder().build()
        ])
        .build();

    const updatedTodo = todo.deleteAttachments();

    expect(updatedTodo.attachments).toBe(null);
});
                </code></pre>
            </div>
            <div class="fragment popover">
                <pre><code class="javascript">
const todo = new TodoBuilder()
    .withAttachments([
        new AttachmentBuilder()
            .withId('attachment-0-id')
            .build(),
        new AttachmentBuilder()
            .withId('attachment-1-id')
            .build()
    ])
    .build();
                </code></pre>
            </div>
            <div class="fragment fade-past">aFooBar()</div>
            <div class="fragment popover">
                <pre><code class="javascript">
function aTodoWithAttachments(length = 0) {
    return new TodoBuilder()
        .withAttachments([
            ...new Array(length).fill(0).map((_, i) =>
                new AttachmentBuilder()
                    .withId(`attachment-${i}-id`)
                    .build()
            )
        ])
        .build();
}
                </code></pre>
            </div>
            <div class="fragment popover">
                <pre><code class="javascript">
const todo = aTodoWithAttachments(3);

todo.deleteFirstAttachment();

expect(todo.attachments.length).toBe(2);
                </code></pre>
            </div>
            <div class="fragment fade-past">drivers</div>
            <div class="fragment popover">
                <pre><code class="javascript">
it('should open the new todo window on button press', () => {
    todoListDriver.loadPage();

    todoListDriver.when.newTodoButtonClicked();

    expect(driver.get.newTodoModal()).toBeVisible();
});
                </code></pre>
            </div>
            <div class="fragment popover">
                <pre><code class="javascript">
class TodoListDriver extends PageDriver {
    loadPage() {
        this.driver.navigateTo('/todos');
    }

    when = {
        newTodoButtonClicked () {
            $('#new-todo').click();
        }
    }

    get = {
        newTodoModal () {
            return $('#new-todo');
        }
    }
}
                </code></pre>
            </div>

<!--            <div class="fragment">Mocks</div>-->
        </section>
<!--        <section class="large">Libraries</section>-->
        <section data-state="chapter-title" class="large">
            05 / No Code
        </section>
        <section>The cleanest code is the code that doesn't exist...</section>
        <section class="large">testim.io</section>
        <section class="large">Same same...but different</section>
        <section data-state="background-img messy-testim"></section>
        <section data-state="background-img cleaner-testim"></section>
        <section data-state="chapter-title" class="large">
            06 / Before You Go
        </section>
        <section class="large">Be a Champion</section>
        <section class="large">Accept Your Responsibility</section>
        <section class="large">Clean Your Tests</section>
        <section>
            <div class="large">
                #clean_your_tests
            </div>

            <div class="template-instance links"></div>

        </section>

    </div>
</div>
<style>

    .large {
        font-size: 1.8em !important;
    }

</style>

<div class="template" id="tiny-test">
    <pre>
        <code class="javascript">
it('should render footer when loading', () => {
  givenAppInLoadingState();
  expect(footer).toBeVisible();
});
        </code>
    </pre>
</div>

<div class="template" id="testing-pyramid">
    <div class="testing-pyramid">
        <div class="zone fragment" data-fragment-index="3"><span>E2E</span></div>
        <div class="zone fragment" data-fragment-index="2"><span>Integration</span></div>
        <div class="zone fragment" data-fragment-index="1"><span>Unit</span></div>
    </div>
</div>

<style>
    .template {
        display: none;
    }

    .testing-pyramid-gradient {
        height: 9em;
        vertical-align: bottom;
        position: relative;
        clip-path: polygon(50% 0, 87.5% 100%, 12.5% 100%);
        background-image: linear-gradient(lightblue, lightgreen, lightsalmon);
    }

    .zone {
        height: 3em;
        vertical-align: bottom;
        position: relative;
    }
    .zone span {
        position:absolute;
        bottom: 0;
        left: 0;
        right: 0;

    }
    .zone:nth-child(1) {
        background-color: lightblue;
        clip-path: polygon(50% 0, 62.5% 100%, 37.5% 100%);
        -webkit-clip-path: polygon(50% 0, 62.5% 100%, 37.5% 100%);
    }
    .zone:nth-child(2) {
        background-color: lightgreen;
        clip-path: polygon(37.5% 0, 62.5% 0, 75% 100%, 25% 100%);
        -webkit-clip-path: polygon(37.5% 0, 62.5% 0, 75% 100%, 25% 100%);
    }
    .zone:nth-child(3) {
        background-color: lightsalmon;
        clip-path: polygon(25% 0, 75% 0, 87.5% 100%, 12.5% 100%);
        -webkit-clip-path: polygon(25% 0, 75% 0, 87.5% 100%, 12.5% 100%);

    }


    .fragment.popover {
        display: none;
    }

    .fragment.popover.current-fragment {
        display: unset;
        position: fixed;
        background-color: white;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
    }

    .stuffed-closet {
        background-image: url(2019/react-il/stuffed_closet.png);
        background-repeat: no-repeat;
        background-size: contain;
        background-position: center;
        height: 100%;
    }

    .messy-testim body {
        background-image: url(2019/react-il/messy_testim.png);
    }


    .cleaner-testim body {
        background-image: url(2019/react-il/cleaner_testim.png);
    }

</style>

