<div class="reveal">
  <div class="slides">
    <section class="title-page">
      <h1 style="font-size:1.3em;">Scaling Mobile Development</h1>
      <h4 style="text-transform: none;font-size: .7em; font-style: italic">(with React Native, of course)</h4>
      <p class="author">
        Aaron Greenwald
      </p>
      <div class="template-instance links"></div>

      <aside class="notes" data-markdown>
        ** Abstract**

        _React Native is great for developing large applications across multiple teams, but only if you architect your app well.
        See the code and architecture that allows us to have disconnected teams working on separate modules
        but delivering a cohesive product that users feel is just one unified app.

        How many developers do you have working on your React Native app? One? Less than five? 15?
        What if you had over 40? React Native is a good fit for developing large applications across multiple teams in a company,
        but only if you architect your app correctly.

        Less than two years ago, I could count all of the developers working on our app on one hand.
        Now, I don’t even know everyone’s names.
        Learn how we architected the Wix app in a way that allows us to have multiple teams on multiple continents
        working on separate modules but delivering a cohesive product that users feel is just one unified app.

        When we first started building the Wix mobile app with React Native, the team was very small.
        But we knew we’d expand it very quickly, and we knew we’d need a way to allow an increasing
        number of developers to start adding functionality very quickly. Making it even more complicated,
        many of these developers would not be part of the “core team” - they’d come from other parts of the company,
        with their own development schedule, roadmap, and management structures. So it was important to create an architecture
        that would be friendly to distributed development, both in code and in process. At the same time,
        it was important to make sure the app would not feel like a frankestein-like mashup of disconnected modules.

        What we came up with is still in production today (although we’ve certainly iterated upon it).
        I’d like to present it to the community so that others can learn from our experience,
        particularly companies that are large and are considering using React Native to build apps by reusing
        existing web developers that are already distributed in separate departments and business functions._
      </aside>

    </section>

    <section data-state="chapter-title">
      01 / Before We Begin
      <aside class="notes" data-markdown>
        * What this talk is NOT about
        * It’s about our experience. It’s not the only way, but it’s worked for us and we learned a few things along the way.
      </aside>
    </section>
    <section>
      Survey
      <aside class="notes" data-markdown>
        * RN Experience
        * Team Size
      </aside>
    </section>
    <section data-state="chapter-title">
      02 / The Challenge
      <aside class="notes" data-markdown>
         * Our goals were to:

          * build a single app, with many teams
          * Use existing web expertise
          * Scale quickly

         * Why is this is a hard problem in general
         * Why it’s even harder on mobile


      </aside>
    </section>
    <section>
      <div class="fragment fade-past">Single App</div>
      <div class="fragment fade-past">Use Existing Web Expertise</div>
      <div class="fragment fade-past">Scale Quickly</div>
    </section>
    <section>
      <video controls loop>
        <source src="2017/rn-eu/web-edited.mp4" type="video/mp4">
      </video>
    </section>
    <section>
      <video controls loop>
        <source src="2017/rn-eu/mobile-edited.mp4" type="video/mp4">
      </video>
    </section>
    <section>
      This isn't easy
    </section>
    <section>
      (especially on mobile)
    </section>


    <section data-state="chapter-title">
      03 / Philosophy
      <aside class="notes" data-markdown>
        Philosophy:

        * Modularity
        * Independent teams
        * Small government
        * Centralized UX (UI Lib)
      </aside>
    </section>
    <section data-background-color="black">
      <div class="hamilton jefferson"></div>
    </section>
    <section>
      <div>
        Hamilton <span style="color: blueviolet">feared anarchy</span> and thought in terms of <span style="color:blueviolet">order</span>; Jefferson <span style="color:coral">feared tyranny</span> and thought in terms of <span style="color:coral">freedom</span>.
      </div>

      <div style="font-style: italic;font-size: small; float:right"> - Someone @ University of Groningen</div>
    </section>
    <section>
      Independently Governed Teams
    </section>
    <section>
      Small Central Government
    </section>
    <section>
      Centralized UX
    </section>
    <section data-state="chapter-title">
      04 / People
      <aside class="notes" data-markdown>


        Teams

        * Companies & Guilds
        * Taxes...
        * Spotify?
        * Opposite Day (Cross training)
        * Experts on staff
        * Core/Infra team


      </aside>
    </section>
    <section>
      Companies & Guilds
    </section>
    <section data-state="background-img taxes"></section>
    <section data-state="background-img taxes2"></section>
    <section>
      <div class="fragment fade-past">Guild Weeks</div>
      <div class="fragment fade-past">Guild Days</div>
      <div class="fragment fade-past"><i>(Opposite Day)</i></div>
    </section>
    <section>
      <div class="fragment fade-past">Core/Infra Team</div>
      <div class="fragment fade-past">Open Source</div>
      <div class="fragment fade-past">Experts & Specialists</div>
    </section>

    <section data-state="chapter-title">
      05 / Code
      <aside class="notes" data-markdown>



        Architecture:

        * Why RN is a great fit for our needs
        * Inspired by and inspiring the Wix Home
        * Module registry
        * No shared state, multiple reduxes, mobx, test frameworks
        * FOSS from day one helps with modularity



      </aside>
    </section>
    <section>
      <div class="fragment fade-past">React Native</div>
      <div class="fragment fade-past">FOSS from Day One</div>
      <div class="fragment fade-past">Modules</div>
    </section>
    <section data-state="background-img woa"></section>
    <section>
      <pre>
        <code>
export function initModules() {
  require('wix-one-app-bi').default.init();
  require('native-app-wix-login');
  require('wix-one-app-feed');
  require('wix-inbox-mobile');
  require('wix-hotels-mobile-app');
  require('wix-store-merchant-app');
  require('wix-one-app-pos');
  require('wix-one-app-module-blog');
  require('wix-one-bookings-manager');
  require('wix-visitors-mobile-app');
  require('wix-invoices-mobile');
  require('wix-contact-card-mobile');
  require('wix-mobile-media-manager');
  require('wix-one-app-more');
  require('wix-promote-app-module');
  //clubs
  require('wix-one-clubs-chat').default();
  require('wix-one-bookings-member').default();
  require('wix-one-invites').default();
  require('wix-one-clubs-manager').default();
  require('wix-one-clubs-feed').default();
  require('wix-one-activities').default();
  require('wix-one-app-notifications');
}

        </code>
      </pre>
    </section>
    <section>
      <div class="fragment list-header">Module Registry</div>
      <div class="fragment fade-past">Component Registry</div>
      <div class="fragment fade-past">PubSub Events</div>
      <div class="fragment fade-past">Method Invocation</div>
    </section>
    <section>
      <div class="list-header">Module Registry</div>
      <div class="fragment">
        <pre>
          <code>
// expose
ModuleRegistry.notifyListeners('core.SessionUpdate', session);

// consume
const subscription = ModuleRegistry.addListener('core.SessionUpdate', function (session) {
  // consumer handles updated session here
});
subscription.remove();
          </code>
        </pre>
      </div>
      <div class="fragment">
        <pre>
          <code>
// expose (react-native-navigation screen), see note below
ModuleRegistry.registerComponentAsScreen('hotels.Dashboard', () => ComponentClass, store, Provider);

// expose (regular component / view)
ModuleRegistry.registerComponent('hotels.ReservationView', () => ComponentClass);

// consume
const ComponentClass = ModuleRegisry.component('hotels.Dashboard');
          </code>
        </pre>
      </div>
      <div class="fragment">
        <pre>
          <code>
// expose
ModuleRegistry.registerMethod('inbox.getContactDetails', () => contactService.getContactDetails);

// consume
const contactDetails = await ModuleRegistry.invoke('inbox.getContactDetails', 'johnsmith@example.com');
      </code>
      </pre>
  </div>

    </section>
    <section>
      No Shared State
    </section>
    <section>
      Session Management
    </section>
    <section>
      <div>UI Lib</div>
      <div><i style="color:coral">github.com/wix/react-native-ui-lib</i></div>
    </section>
    <section>
      wix-react-native-framework
    </section>
    <section>
      Demo Apps
    </section>
    <section data-state="chapter-title">
      06 / Sounds Easy
      <aside class="notes" data-markdown>
        Well, it's not really. But we're working on it.


      </aside>
    </section>

    <section>
      <div class="fragment">
        Do you need to think about this?
      </div>

      <div class="fragment">
        <div class="template-instance links"></div>

      </div>

    </section>

  </div>
</div>
<style>
  .woa body {
    background-image: url(2017/rn-eu/woa.png);
  }

  .hamilton.jefferson {
    background: url(//upload.wikimedia.org/wikipedia/commons/thumb/0/05/Alexander_Hamilton_portrait_by_John_Trumbull_1806.jpg/440px-Alexander_Hamilton_portrait_by_John_Trumbull_1806.jpg) repeat-y,
    url(//upload.wikimedia.org/wikipedia/commons/thumb/0/07/Official_Presidential_portrait_of_Thomas_Jefferson_%28by_Rembrandt_Peale%2C_1800%29.jpg/440px-Official_Presidential_portrait_of_Thomas_Jefferson_%28by_Rembrandt_Peale%2C_1800%29.jpg) repeat;
    height: 440px;
    width:880px;
  }

  .taxes2 body {
    background-image: url(//media.giphy.com/media/m5Mc6wjeecaOY/giphy.gif);
  }

  .taxes body {
    background-image: url(//media.riffsy.com/images/b159391c31b78e91b7c1a7139649679a/tenor.gif);
  }


</style>


